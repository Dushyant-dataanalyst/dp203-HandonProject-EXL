{
	"name": "Send_data_eventhub",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "dp203exl",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "92e6bd4f-c5aa-44ae-84b6-0edf1c44e626"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/2b95d830-fc0d-4d49-82a7-83baa7f46a17/resourceGroups/dp203-exl/providers/Microsoft.Synapse/workspaces/dp203-exl/bigDataPools/dp203exl",
				"name": "dp203exl",
				"type": "Spark",
				"endpoint": "https://dp203-exl.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/dp203exl",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"pip install azure-eventhub"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Define the path to the JSON files in ADLS\r\n",
					"input_path = \"abfss://data@dp203dushyantdatalake.dfs.core.windows.net/Event_Hub_Data/\"\r\n",
					"\r\n",
					"# Read the JSON files into a DataFrame\r\n",
					"df = spark.read.json(input_path)\r\n",
					"\r\n",
					"df.show()"
				],
				"execution_count": 13
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Define input and output paths\r\n",
					"input_path = \"abfss://data@dp203dushyantdatalake.dfs.core.windows.net/Event_Hub_Data/\"\r\n",
					"output_path = \"abfss://data@dp203dushyantdatalake.dfs.core.windows.net/Event_Hub_Data_Cleaned/\"\r\n",
					"\r\n",
					"# Read JSON files into DataFrame\r\n",
					"df = spark.read.json(input_path)\r\n",
					"\r\n",
					"# Data cleaning\r\n",
					"df_cleaned = (df\r\n",
					"    .drop(\"sale_id\")\r\n",
					"    .fillna({\r\n",
					"        \"product_id\": \"unknown\",\r\n",
					"        \"product_name\": \"unknown\",\r\n",
					"        \"quantity\": 0,\r\n",
					"        \"total_amount\": 0.0\r\n",
					"    })\r\n",
					"    .filter(col(\"sale_date\").isNotNull())\r\n",
					"    .filter(col(\"price\").isNotNull())\r\n",
					"    .filter(col(\"region\").isNotNull())\r\n",
					"    .filter(col(\"product_id\").isNotNull())\r\n",
					"    .filter(col(\"product_name\").isNotNull())\r\n",
					")\r\n",
					"\r\n",
					"# Write cleaned DataFrame back to ADLS\r\n",
					"df_cleaned.write.mode(\"overwrite\").json(output_path)\r\n",
					"\r\n",
					"print(\"JSON files cleaned and written to:\", output_path)"
				],
				"execution_count": 18
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql import SparkSession\r\n",
					"from pyspark.sql.functions import col\r\n",
					"\r\n",
					"\r\n",
					"# Define input path and read JSON files\r\n",
					"input_path = \"abfss://data@dp203dushyantdatalake.dfs.core.windows.net/Event_Hub_Data/\"\r\n",
					"df = spark.read.json(input_path)\r\n",
					"\r\n",
					"# Data cleaning\r\n",
					"df_cleaned = (df\r\n",
					"    .drop(\"sale_id\")\r\n",
					"    .fillna({\r\n",
					"        \"product_id\": \"unknown\",\r\n",
					"        \"product_name\": \"unknown\",\r\n",
					"        \"quantity\": 0,\r\n",
					"        \"total_amount\": 0.0\r\n",
					"    })\r\n",
					"    .filter(col(\"sale_date\").isNotNull())\r\n",
					"    .filter(col(\"price\").isNotNull())\r\n",
					"    .filter(col(\"region\").isNotNull())\r\n",
					"    .filter(col(\"product_id\").isNotNull())\r\n",
					"    .filter(col(\"product_name\").isNotNull())\r\n",
					")\r\n",
					"\r\n",
					"# Define Event Hub connection parameters\r\n",
					"event_hub_connection_string = (\r\n",
					"    \"\r\n",
					")\r\n",
					"\r\n",
					"# Define the DataFrame to send\r\n",
					"# Ensure DataFrame is in the correct format for Event Hub\r\n",
					"df_cleaned = df_cleaned.selectExpr(\"to_json(struct(*)) AS body\")\r\n",
					"\r\n",
					"# Send the DataFrame to Event Hub\r\n",
					"try:\r\n",
					"    df_cleaned.write \\\r\n",
					"        .format(\"eventhubs\") \\\r\n",
					"        .option(\"eventhubs.connectionString\", event_hub_connection_string) \\\r\n",
					"        .save()\r\n",
					"    print(\"DataFrame successfully sent to Event Hub.\")\r\n",
					"except Exception as e:\r\n",
					"    print(\"An error occurred while sending the DataFrame to Event Hub:\", str(e))"
				],
				"execution_count": 22
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"spark.sparkContext.setLogLevel(\"DEBUG\")\r\n",
					""
				],
				"execution_count": 21
			}
		]
	}
}