{
	"name": "Send_data_eventhub",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "dp203exl",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "0e257aa8-6d0c-4090-9578-9b69ceaca4ef"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/2b95d830-fc0d-4d49-82a7-83baa7f46a17/resourceGroups/dp203-exl/providers/Microsoft.Synapse/workspaces/dp203-exl/bigDataPools/dp203exl",
				"name": "dp203exl",
				"type": "Spark",
				"endpoint": "https://dp203-exl.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/dp203exl",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"pip install azure-eventhub"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql.types import StructType, StructField, StringType, DoubleType\r\n",
					"\r\n",
					"# Define the schema based on your JSON structure\r\n",
					"json_schema = StructType([\r\n",
					"    StructField(\"sale_id\", StringType(), True),\r\n",
					"    StructField(\"product_id\", StringType(), True),\r\n",
					"    StructField(\"product_name\", StringType(), True),\r\n",
					"    StructField(\"quantity\", DoubleType(), True),\r\n",
					"    StructField(\"price\", DoubleType(), True),\r\n",
					"    StructField(\"total_amount\", DoubleType(), True),\r\n",
					"    StructField(\"sale_date\", StringType(), True),\r\n",
					"    StructField(\"region\", StringType(), True)\r\n",
					"])\r\n",
					"\r\n",
					"# Read JSON files with the defined schema\r\n",
					"input_path = \"abfss://data@dp203dushyantdatalake.dfs.core.windows.net/sales_data/onlinetransaction/\"\r\n",
					"json_df = spark.read.schema(json_schema).json(input_path)\r\n",
					"\r\n",
					"# Display the DataFrame (optional)\r\n",
					"json_df.show()"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.functions import year, month, dayofmonth, hour, minute, second, col\r\n",
					"\r\n",
					"\r\n",
					"# Extract year, month, day, hour, minute, second from sale_date\r\n",
					"cleaned_df = json_df.withColumn(\"year\", year(col(\"sale_date\"))) \\\r\n",
					"                    .withColumn(\"month\", month(col(\"sale_date\"))) \\\r\n",
					"                    .withColumn(\"day\", dayofmonth(col(\"sale_date\"))) \\\r\n",
					"                    .withColumn(\"hour\", hour(col(\"sale_date\"))) \\\r\n",
					"                    .withColumn(\"minute\", minute(col(\"sale_date\"))) \\\r\n",
					"                    .withColumn(\"second\", second(col(\"sale_date\")))\r\n",
					"\r\n",
					"# Define the output path for the cleaned data\r\n",
					"output_path = \"abfss://eventdata@dp203dushyantdatalake.dfs.core.windows.net/\"\r\n",
					"\r\n",
					"# Save the cleaned data in JSON format with the structured path\r\n",
					"cleaned_df.write.mode(\"overwrite\").json(\r\n",
					"    output_path + \"namespace/eventhub/partitionid/\"\r\n",
					"    + \"year={year}/month={month}/day={day}/hour={hour}/minute={minute}/second={second}\"\r\n",
					")\r\n",
					""
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Event Hub connection parameters\r\n",
					"event_hub_namespace = \"eventhubjsonsales.servicebus.windows.net\"\r\n",
					"event_hub_name = \"eventhubjsonsales\"\r\n",
					"sas_key_name = \"RootManageSharedAccessKey\"\r\n",
					"sas_key = \"\"\r\n",
					"\r\n",
					"# Define Event Hub connection properties\r\n",
					"event_hub_config = {\r\n",
					"    \"eventhubs.connectionString\": f\"Endpoint=sb://{event_hub_namespace}/;SharedAccessKeyName={sas_key_name};SharedAccessKey={sas_key};EntityPath={event_hub_name}\"\r\n",
					"}\r\n",
					"\r\n",
					"# Define the DataFrame to send\r\n",
					"# cleaned_df = ... (assuming cleaned_df is already defined)\r\n",
					"\r\n",
					"# Send the DataFrame to Event Hub\r\n",
					"try:\r\n",
					"    cleaned_df.write \\\r\n",
					"        .format(\"eventhubs\") \\\r\n",
					"        .options(**event_hub_config) \\\r\n",
					"        .save()\r\n",
					"    print(\"DataFrame successfully sent to Event Hub.\")\r\n",
					"except Exception as e:\r\n",
					"    print(\"An error occurred while sending the DataFrame to Event Hub:\", str(e))\r\n",
					""
				],
				"execution_count": 3
			}
		]
	}
}