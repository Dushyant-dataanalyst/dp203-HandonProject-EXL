{
	"name": "Combine data",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "dp203exl",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "956cf090-d429-4e71-a12b-1401713ae7b6"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/2b95d830-fc0d-4d49-82a7-83baa7f46a17/resourceGroups/dp203-exl/providers/Microsoft.Synapse/workspaces/dp203-exl/bigDataPools/dp203exl",
				"name": "dp203exl",
				"type": "Spark",
				"endpoint": "https://dp203-exl.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/dp203exl",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# **Read input file **"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import pandas as pd\n",
					"from pyspark.sql.functions import col, to_date , to_timestamp\n",
					"from pyspark.sql.types import IntegerType, DoubleType\n",
					"\n",
					"\n",
					"\n",
					"\n",
					"csv_df  = spark.read.option(\"recursiveFileLookup\",\"true\").csv(\"abfss://data@dp203dushyantdatalake.dfs.core.windows.net/sales_data/poscsv/*\",header=True)\n",
					"\n",
					"parquet_df = spark.read \\\n",
					"    .option(\"recursiveFileLookup\", \"true\").parquet(\"abfss://data@dp203dushyantdatalake.dfs.core.windows.net/sales_data/posparquet/\")\n",
					"\n",
					"csv_df.count() "
				],
				"execution_count": 36
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"csv_df = csv_df.union(parquet_df)\r\n",
					"csv_df.count() "
				],
				"execution_count": 37
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Drop na\r\n",
					"csv_df = csv_df.dropna()\r\n",
					"\r\n",
					"# Drop duplicates\r\n",
					"csv_df = csv_df.dropDuplicates()\r\n",
					"\r\n",
					"print(csv_df.dtypes)\r\n",
					"csv_df.count() "
				],
				"execution_count": 38
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Convert 'quantity' column to IntegerType\r\n",
					"csv_df = csv_df.withColumn(\"quantity\", col(\"quantity\").cast(IntegerType()))\r\n",
					"\r\n",
					"# Convert 'price' column to DoubleType\r\n",
					"csv_df = csv_df.withColumn(\"price\", col(\"price\").cast(DoubleType()))\r\n",
					"\r\n",
					"# Convert 'total_amount' column to DoubleType\r\n",
					"csv_df = csv_df.withColumn(\"total_amount\", col(\"total_amount\").cast(DoubleType()))\r\n",
					"\r\n",
					"# Cast the sale_date column to TIMESTAMP\r\n",
					"csv_df = csv_df.withColumn(\"sale_date\", col(\"sale_date\").cast(\"TIMESTAMP\"))\r\n",
					"\r\n",
					"# Show the DataFrame and schema to verify changes\r\n",
					"csv_df.printSchema()"
				],
				"execution_count": 39
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Example transformation: Calculate total sales by region\r\n",
					"sales_df = csv_df.groupBy(\"region\",\"product_name\").agg({\"total_amount\": \"sum\"})\r\n",
					"sales_df.show()"
				],
				"execution_count": 40
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Limit the DataFrame to 100 rows\r\n",
					"csv_df_limited = csv_df.limit(100)\r\n",
					"\r\n",
					"# Define the JDBC URL and connection properties\r\n",
					"jdbc_url = \"jdbc:sqlserver://dp203-exl.sql.azuresynapse.net:1433;database=Sales_data_transformed;user=sqladminuser123@dp203-exl;password=Dushyant@099;encrypt=true;trustServerCertificate=false;hostNameInCertificate=*.sql.azuresynapse.net;loginTimeout=30;\"\r\n",
					"jdbc_properties = {\r\n",
					"    \"user\": \"sqladminuser123\",\r\n",
					"    \"password\": \"Dushyant@099\",\r\n",
					"    \"driver\": \"com.microsoft.sqlserver.jdbc.SQLServerDriver\"\r\n",
					"}\r\n",
					"\r\n",
					"\r\n",
					"# Write the DataFrame to the SQL Pool table\r\n",
					"try:\r\n",
					"    csv_df_limited.write \\\r\n",
					"        .mode(\"append\") \\\r\n",
					"        .jdbc(url=jdbc_url, table=\"Sales_data\", properties=jdbc_properties)\r\n",
					"    print(\"DataFrame successfully written to Sales_data\")\r\n",
					"except Exception as e:\r\n",
					"    print(\"An error occurred while writing the DataFrame to SQL Pool:\", str(e))\r\n",
					""
				],
				"execution_count": 41
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"json_df = spark.read.option(\"recursiveFileLookup\", \"true\").json(\"abfss://data@dp203dushyantdatalake.dfs.core.windows.net/sales_data/onlinetransaction/\")"
				],
				"execution_count": 43
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Display the schema\r\n",
					"json_df.printSchema()\r\n",
					"\r\n",
					"# Show a sample of the data\r\n",
					"json_df.show()"
				],
				"execution_count": 45
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Fill missing values\r\n",
					"cleaned_df = json_df \\\r\n",
					"    .fillna({\r\n",
					"        \"price\": 0.0,\r\n",
					"        \"quantity\": 0.0,\r\n",
					"        \"total_amount\": 0.0,\r\n",
					"        \"product_id\": \"unknown\",\r\n",
					"        \"product_name\": \"unknown\",\r\n",
					"        \"region\": \"unknown\",\r\n",
					"        \"sale_date\": \"unknown\",\r\n",
					"        \"sale_id\": \"unknown\"\r\n",
					"    })\r\n",
					"\r\n",
					"# Alternatively, drop rows with missing values in specific columns\r\n",
					"cleaned_df = json_df \\\r\n",
					"    .dropna(subset=[\"price\", \"quantity\", \"total_amount\", \"product_id\", \"product_name\", \"region\", \"sale_date\", \"sale_id\"])\r\n",
					"\r\n",
					"# Optionally, you can use different strategies for different columns\r\n",
					"# Example: Fill missing `sale_date` with a placeholder and drop rows with missing numeric columns\r\n",
					"cleaned_df = json_df \\\r\n",
					"    .fillna({\r\n",
					"        \"product_id\": \"unknown\",\r\n",
					"        \"product_name\": \"unknown\",\r\n",
					"        \"region\": \"unknown\",\r\n",
					"        \"sale_date\": \"unknown\",\r\n",
					"        \"sale_id\": \"unknown\"\r\n",
					"    }) \\\r\n",
					"    .dropna(subset=[\"price\", \"quantity\", \"total_amount\"])\r\n",
					"\r\n",
					"# Show the cleaned DataFrame\r\n",
					"cleaned_df.show()"
				],
				"execution_count": 46
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Save cleaned data to Azure Data Lake Gen 2 in Parquet format\r\n",
					"cleaned_df.write.mode(\"overwrite\").parquet(\"abfss://data@dp203dushyantdatalake.dfs.core.windows.net/Event_Hub_Data/\")\r\n",
					""
				],
				"execution_count": 47
			}
		]
	}
}